(async()=>{
    
    
    if (!json.ok) {
        window.Telegram.WebApp.showAlert('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫');
    }

    let page = 0;
    let json;
    const response = await fetch('https://casinotestweb.ru/applications', {
        method: 'post',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ initData: window.Telegram.WebApp.initData })
    });
    json = await response.json();
    let choosedData;
    
    const table = document.querySelector('.table')
    const form = document.querySelector('.form-view');
    const formTable = document.querySelector('.form-table');
    const head = document.querySelector('.head');
    const button = document.querySelector('.collect');

    window.Telegram.WebApp.BackButton.onClick(() => {
        table.classList.remove('hidden');
        form.classList.add('hidden');
        ispolForm.classList.remove('hidden');
        document.querySelector('.menu').classList.remove('hidden');
        head.innerText = '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫';
        window.Telegram.WebApp.BackButton.hide();
    })

    function updateButtons() {
        console.log(page);
        document.querySelector('.first').innerText = page === 0 ? '1' : (page+1).toString();
        document.querySelector('.second').innerText = page === 0 ? '2' : (page+2).toString();
        document.querySelector('.third').innerText = page === 0 ? '3' : (page+3).toString();
    }
    
    document.querySelector('.first').addEventListener('click', (e) => { page = Number(e.target.innerText)-1; updateTables(); updateButtons(); })
    document.querySelector('.second').addEventListener('click', (e) => { page = Number(e.target.innerText)-1; updateTables(); updateButtons(); })
    document.querySelector('.third').addEventListener('click', (e) => { page = Number(e.target.innerText)-1; updateTables(); updateButtons(); })
    document.querySelector('.back').addEventListener('click', () => {
        page--;
        updateButtons();
        updateTables();
    })
    document.querySelector('.next').addEventListener('click', () => {
        page++;
        updateButtons();
        updateTables();
    })

    function updateTables() {
        
        table.innerHTML = `<tr>
            <td>–ü—Ä–æ—Ü–µ–Ω—Ç</td>
            <td>–°—É–º–º–∞ –≤ USDTüíµ</td>
            <td>–ë–∞–Ω–∫ üè¶</td>
            <td>–ú–µ—Ç–æ–¥ üí≥</td>
            <td>–§–∞–º–∏–ª–∏—è</td>
        </tr>`;
        for(const data of json.data.filter((e,i) => i>=page*10 && i < (page+1)*10)) {
            
            const tr = document.createElement('tr');
            table.appendChild(tr);

            const field1 = document.createElement('td');
            field1.innerText = data.percent;
            const field2 = document.createElement('td');
            field2.innerText = data.limit;
            const field3 = document.createElement('td');
            field3.innerText = data.method
            const field4 = document.createElement('td');
            field4.innerText = data.methodName == 'cash' ? data.address.split(',')[0].trim() : data.bank 
            const field5 = document.createElement('td');
            field5.innerText = data.fullname.split(' ')[0];

            tr.appendChild(field1);
            tr.appendChild(field2);
            tr.appendChild(field3);
            tr.appendChild(field4);
            tr.appendChild(field5);

            tr.addEventListener('click', () => {
                document.querySelector('.menu').classList.add('hidden');
                choosedData = data;
                head.innerText = '–ó–∞—è–≤–∫–∞ #'+data.id;
                window.Telegram.WebApp.BackButton.show()
                formTable.innerHTML = `<tr>
                    <td class="form-label">–ü–æ–ª–µ</td>
                    <td class="form-value">–ó–Ω–∞—á–µ–Ω–∏–µ</td>
                </tr>`;
                table.classList.add('hidden');
                form.classList.remove('hidden');
                
                const valuesList = {
                    '–ú–µ—Ç–æ–¥': data.method,
                    '–í—ã–ø–ª–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫': data.block,
                    '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å': data.actual,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': data.percent,
                    '–õ–∏–º–∏—Ç': data.limit,
                    '–ë–∞–Ω–∫': data.methodName == 'cash' ? '' : data.bank,
                    '–ù–æ–º–µ—Ä': data.number,
                    '–ö–∞—Ä—Ç–∞': data.card,
                    '–ò—Å—Ç–µ–∫–∞–µ—Ç': data.expire,
                    'CVV': data.cvv,
                    '–ü–∏–Ω': data.pin,
                    '–ê–∫–∫–∞—É–Ω—Ç': data.account,
                    '–ò–ù–ù': data.inn,
                    '–ü–æ–ª–Ω–æ–µ –∏–º—è': data.fullname,
                    '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è': data.birthday,
                    '–ê–¥—Ä–µ—Å—Å': data.address,
                };

                const keys = Object.keys(valuesList);
                for(const key of keys) {
                    const tr = document.createElement('tr');
                    formTable.appendChild(tr);
                    const label = document.createElement('td');
                    label.classList.add('form-label');
                    label.innerText = key;
                    const value = document.createElement('td');
                    value.classList.add('form-value');
                    let exitValue = valuesList[key];
                    exitValue = ['true','false'].includes(exitValue) ? (exitValue=='true'?'‚úÖ –î–∞':'‚ùå –ù–µ—Ç') : exitValue;
                    exitValue = [
                        'sberbank', 'tinkoff', 'ozon', 'home', 'rosbank', 'uralbank', 'alfabank', 'vtbbank', 'raiffaisen', 'pochtabank', 'mtsbank', 'sovkombank'
                    ].includes(exitValue) ? {
                        sberbank: "–°–±–µ—Ä–±–∞–Ω–∫",
                        tinkoff: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                        ozon: "–û–∑–æ–Ω",
                        home: "–•–æ—É–º",
                        rosbank: "–†–æ—Å–±–∞–Ω–∫",
                        uralbank: "–£—Ä–∞–ª–±–∞–Ω–∫",
                        alfabank: "–ê–ª—å—Ñ–∞–±–∞–Ω–∫",
                        vtbbank: "–í–¢–ë –±–∞–Ω–∫",
                        raiffaisen: "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω",
                        pochtabank: "–ü–æ—á—Ç–∞–±–∞–Ω–∫",
                        mtsbank: "–ú–¢–° –±–∞–Ω–∫",
                        sovkombank: "–°–æ–≤–∫–æ–º –±–∞–Ω–∫"
                    }[exitValue] : exitValue;
                    exitValue = ['nfc', 'cash', 'transfer', 'card'].includes(exitValue) ? {
                        nfc: "üì± Cash in / NFC",
                        cash: "üõª –ö—É—Ä—å–µ—Ä –Ω–∞–ª–∏—á–Ω—ã—Ö",
                        transfer: "üí≥ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ —Å—á–µ—Ç—É",
                        card: "üí≥ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ",
                    }[exitValue] : exitValue;

                    value.innerText = exitValue;
                    tr.appendChild(label);
                    tr.appendChild(value);
                } 

            })

        }
    }

    button.addEventListener('click', async () => {
        const response = await fetch('https://casinotestweb.ru/claim', {
            method: 'post',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify({
                initData: window.Telegram.WebApp.initData,
                id: choosedData.id
            })
        });
        const json = await response.json();
        if (!json.ok) {
            window.Telegram.WebApp.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É.');
            return;
        }
        if (choosedData.methodName == 'cash') {
            location.href = 'https://casinotestweb.ru/additional_worker?id='+choosedData.id
            return;
        }
        window.Telegram.WebApp.close();
    })

})()